{"version":3,"sources":["components/PetList.js","components/PetForm.js","components/PetDetails.js","components/PetUpdate.js","App.js","serviceWorker.js","index.js"],"names":["PetList","props","useState","pets","setPets","useEffect","axios","get","then","res","data","to","console","log","map","pet","index","key","name","type","_id","PetForm","errors","setErrors","setName","setType","description","setDescription","skillOne","setSkills1","skillTwo","setSkills2","skillThree","setSkills3","err","style","color","onSubmit","event","preventDefault","post","navigate","catch","response","errorResponse","errorArray","Object","keys","push","message","onChange","target","value","PetDetails","id","count","setCount","likes","setLikes","onClick","petID","delete","num","put","PetUpdate","setPet","errorResonse","defaultValue","placeholder","App","className","from","noThrow","path","default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c59f2bc0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from '@reach/router';\r\n\r\nconst PetList = props => {\r\n\r\n    const [pets, setPets] = useState([]);\r\n\r\n    useEffect( () => {\r\n        axios.get('http://localhost:9999/api/pets')\r\n            .then( res => setPets(res.data))\r\n    },[])\r\n\r\n\r\n    return(\r\n        <>\r\n        <h3>These Pets are looking for a home!</h3>\r\n        <Link to ='/pets/new'>Add a pet to the shelter</Link>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>Pet Name</td>\r\n                    <td>Type</td>\r\n                    <td>Action</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {console.log(pets)}\r\n                {pets.map((pet, index) => {\r\n                    return(\r\n                        <tr key ={index}>\r\n                            <td>{pet.name}</td>\r\n                            <td>{pet.type}</td>\r\n                            <td> <Link to={'/pets/' + pet._id}>Details</Link>  <Link to={'/pets/' + pet._id + '/edit'}>Edit</Link> </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default PetList","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\n\r\n\r\nconst PetForm = () => {\r\n\r\n    const [errors, setErrors] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [skillOne, setSkills1] = useState();\r\n    const [skillTwo, setSkills2] = useState();\r\n    const [skillThree, setSkills3] = useState();\r\n\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault();\r\n        axios.post('http://localhost:9999/api/pets/create', {\r\n            name,\r\n            type,\r\n            description,\r\n            skillOne, \r\n            skillTwo, \r\n            skillThree\r\n        })\r\n        .then(res => {\r\n            navigate('/')\r\n        })\r\n        .catch( err => {\r\n            console.log(err.response.data.errors);\r\n            const errorResponse = err.response.data.errors;\r\n            const errorArray =[];\r\n            for(const key of Object.keys(errorResponse)){\r\n                errorArray.push(errorResponse[key].message)\r\n            }\r\n            setErrors(errorArray);\r\n        })\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        {errors.map ((err, index) => \r\n            <p key ={index} style = {{color: \"red\"}}> {err} </p>\r\n        )}\r\n\r\n        <form onSubmit = {onSubmit}>\r\n            <label>Pet Name: </label>\r\n            <input type = \"text\" onChange = {(event) => setName(event.target.value)}/>\r\n            <br/>\r\n            <label>Pet Type: </label>\r\n            <input type = \"text\" onChange = {(event) => setType(event.target.value)}/>\r\n            <br/>\r\n            <label>Pet Description: </label>\r\n            <input type = \"text\" onChange = {(event) => setDescription(event.target.value)}/>\r\n            <br/>\r\n            <hr></hr>\r\n            <label>Skills (optional): </label>\r\n            <br></br>\r\n            <label>Skill 1: </label>\r\n            <input type = \"text\" onChange = {(event) => setSkills1(event.target.value)}/>\r\n            <br/>\r\n            <label>Skill 2: </label>\r\n            <input type = \"text\" onChange = {(event) => setSkills2(event.target.value)}/>\r\n            <br/>\r\n            <label>Skill 3: </label>\r\n            <input type = \"text\" onChange = {(event) => setSkills3(event.target.value)}/>\r\n            <br/>\r\n            <br/>\r\n            <button> Submit </button><span> </span>\r\n            <Link to ='/pets'>Cancel</Link>\r\n        </form>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default PetForm","import React, { useEffect, useState} from 'react';\r\nimport {Link, navigate} from '@reach/router';\r\nimport axios from 'axios';\r\n\r\n\r\nconst PetDetails = props => {\r\n    const id = props.id\r\n    const [pet, setPets] = useState({})\r\n    const [count, setCount] = useState(0)\r\n    const [likes, setLikes] = useState()\r\n    \r\n    useEffect( () => {\r\n        axios.get(\"http://localhost:9999/api/pet/\" + id)\r\n        .then(res => {\r\n            setPets(res.data);\r\n            setLikes(res.data.likes)\r\n        })\r\n    }, [])\r\n    \r\n    \r\n    const adopt = petID => {\r\n        axios.delete(\"http://localhost:9999/api/pet/\" + petID)\r\n            .then(res => {\r\n                //console.log(res)\r\n                navigate('/')\r\n            });\r\n    }\r\n\r\n    const like = (petID, num) => {\r\n        setLikes(likes + num)\r\n        axios.put(\"http://localhost:9999/api/pet/\" + petID, {\r\n            likes: likes + num\r\n        })\r\n            .then(res => {\r\n                setCount(1)\r\n                console.log(res)\r\n                setPets(res.data)\r\n            })\r\n    }\r\n\r\n    \r\n    \r\n    {console.log(likes)}\r\n\r\n    return(\r\n        <div>\r\n            <p>Details about {pet.name}</p>\r\n            <label>Description : </label><span>{pet.description}</span>\r\n            <br/>\r\n            <label>Type : </label><span>{pet.type}</span>\r\n            <br/>\r\n            <hr/>\r\n            <label>Pet's Skills : </label>\r\n                {pet.skillOne ? <p>{pet.skillOne}</p>:<p></p>}\r\n                {pet.skillTwo ? <p>{pet.skillTwo}</p>:<p></p>}\r\n                {pet.skillThree ? <p>{pet.skillThree}</p>:<p></p>}\r\n            <br/><hr/>\r\n            <label>Likes : </label><span>{pet.likes}</span>\r\n            <br/>\r\n            <button onClick = {event => {adopt(pet._id)}}>Adopt this Pet!</button><span>  </span>\r\n            {count === 0 ? <button onClick ={event => {like(pet._id, 1)}} >Like!</button>: <span></span>}\r\n            <span>  </span>\r\n            <Link to = '/'>Cancel</Link>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PetDetails","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {navigate, Link} from '@reach/router';\r\n\r\nconst PetUpdate = props => {\r\n    const id = props.id;\r\n    const [pet, setPet] = useState({});\r\n    const [errors, setErrors] = useState([]);\r\n    const [name, setName] = useState();\r\n    const [type, setType] = useState();\r\n    const [description, setDescription] = useState();\r\n    const [skillOne, setSkills1] = useState();\r\n    const [skillTwo, setSkills2] = useState();\r\n    const [skillThree, setSkills3] = useState();\r\n\r\n    useEffect(()=> {\r\n        axios.get('http://localhost:9999/api/pet/' + id)\r\n            .then(res => {\r\n                setPet(res.data)\r\n            })\r\n    },[])\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault();\r\n        axios.put('http://localhost:9999/api/pet/' + id, {\r\n            name,\r\n            type,\r\n            description,\r\n            skillOne,\r\n            skillTwo,\r\n            skillThree\r\n        })\r\n            .then(res => {\r\n                navigate('/pet/' + id);\r\n                console.log(res)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                const errorResonse = err.response.data.errors;\r\n                const errorArray = [];\r\n                for (const key of Object.keys(errorResonse)){\r\n                    errorArray.push(errorResonse[key].message)\r\n                }\r\n                setErrors(errorArray);\r\n            })\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        {errors.map ((err, index) => \r\n            <p key = {index} style ={{color: \"red\"}}>{err}</p>\r\n        )}\r\n        <form onSubmit ={onSubmit}>\r\n            <label>Pet Name: </label>\r\n            <input type = \"text\" defaultValue ={pet.name}  onChange = {(event) => setName(event.target.value)}/>\r\n            <br/>\r\n            <label>Pet Type: </label>\r\n            <input type = \"text\" defaultValue ={pet.type} onChange = {(event) => setType(event.target.value)}/>\r\n            <br/>\r\n            <label>Pet Description: </label>\r\n            <input type = \"text\" defaultValue ={pet.description} onChange = {(event) => setDescription(event.target.value)}/>\r\n            <br/>\r\n            <hr></hr>\r\n            <label>Skills (optional): </label>\r\n            <br></br>\r\n            <label>Skill 1: </label>\r\n            <input type = \"text\" placeholder ={pet.skillOne?pet.skillOne:\"\"} onChange = {(event) => setSkills1(event.target.value)}/>\r\n            <br/>\r\n            <label>Skill 2: </label>\r\n            <input type = \"text\" placeholder ={pet.skillTwo?pet.skillTwo:\"\"} onChange = {(event) => setSkills2(event.target.value)}/>\r\n            <br/>\r\n            <label>Skill 3: </label>\r\n            <input type = \"text\" placeholder ={pet.skillThree?pet.skillThree:\"\"} onChange = {(event) => setSkills3(event.target.value)}/>\r\n            <br/>\r\n            <br/>\r\n            <button> Submit </button><span> </span>\r\n            <Link to ={'/pets/' + pet._id}>Cancel</Link>\r\n        </form>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default PetUpdate","import React from 'react';\nimport './App.css';\nimport PetList from './components/PetList';\nimport PetForm from './components/PetForm';\nimport {Router, Redirect} from '@reach/router'\nimport PetDetails from './components/PetDetails';\nimport PetUpdate from './components/PetUpdate';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Pet Shelter</h1>\n        <Router>\n          <Redirect from = '/' to = '/pets' noThrow/>\n          <PetList path = '/pets' default/>\n          <PetForm path = '/pets/new'/>\n          <PetDetails path = '/pets/:id'/>\n          <PetUpdate path = '/pets/:id/edit'/>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}